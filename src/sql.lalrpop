use ast::*;
use std::str::FromStr;

grammar;

match {
    r"(?i)select" => "SELECT",
    r"(?i)from" => "FROM",
    r"(?i)join" => "JOIN",
    r"(?i)on" => "ON",
    r"(?i)as" => "AS",
    r"(?i)where" => "WHERE",
    r"(?i)and|or" => "AND",
    r"(?i)like" => "LIKE",
    r"(?i)is" => "IS",
    r"(?i)not" => "NOT",
    r"(?i)null" => "NULL",
    "*" => STAR,
    r"[0-9]+" => NUM
} else {
    r"[a-zA-Z0-9_]+" => ID,
    r"'[^']+'" => STRING
} else {
    _
}

pub SelectStmt : SelectStruct = {
    "SELECT"
    <c:Comma<QualifiedIdentifier>>
    "FROM"
    <t:AliasedIdentifier>
    <j:JoinSpecification*>
    <e:WhereSpecification?>
    ";" => SelectStruct { columns : c, table : t, joins: j, filter: e }
};

WhereSpecification : Vec<LogicalExpressionT> = "WHERE" <AndChain<LogicalExpression>>;

AndChain<E>: Vec<E> =
    <v0:(<E> "AND")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

JoinSpecification : JoinSpecificationT = "JOIN" <t:AliasedIdentifier> "ON" <e:LogicalExpression> => JoinSpecificationT { table :t, on: e, typ: JoinType::Inner };

LogicalExpression : LogicalExpressionT = 
    {
        <v1:ExpressionTerm> <o:BinaryOperator> <v2:ExpressionTerm> => LogicalExpressionT::Binary(TwoSidedExpressionT { v1: v1, v2: v2, operator: o }),
        <v1:ExpressionTerm> "IS" "NOT" "NULL" => LogicalExpressionT::Unary(UnaryExpressionT { v1: v1, operator: UnaryOperator::NotNull }),
        <v1:ExpressionTerm> "IS" "NULL" => LogicalExpressionT::Unary(UnaryExpressionT { v1: v1, operator: UnaryOperator::IsNull }),
    };

BinaryOperator : ComparisionOperator = {
    "=" => ComparisionOperator::Eq,
    "LIKE" => ComparisionOperator::Like
}

ExpressionTerm : ExpressionTermT = {
    <s:NUM> => ExpressionTermT::Number(i64::from_str(s).unwrap()),
    <v:QualifiedIdentifier> => ExpressionTermT::Identifier(v),
    <s:STRING> => ExpressionTermT::StringLiteral(s.to_owned())
};

Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

AliasedIdentifier : AliasedIdentifierT = <n:QualifiedIdentifier> <a:AliasSpec?> => AliasedIdentifierT { name: n, alias: a };

AliasSpec : String = "AS"? <Identifier>;

QualifiedIdentifier : QualifiedIdentifierT = <s:SchemaQualifier?> <n:Identifier> => QualifiedIdentifierT { name: n, qualifier: s };

SchemaQualifier : String = <ID> "." => <>.to_string();

Identifier : String = { ID => <>.to_string() , STAR => <>.to_string() } ;